#####################################
#####################################
#                                   #
#         Slide #24 Script          #
#                                   #
#####################################
#####################################

A few words on the format of our tutorial
Grails app, controller on server to evaluate Groovy and Scala Script
Client side we use code mirror to show you step by step how to achieve

Purpose
=======
Lets see how we can embed and evaluate Groovy script.

Users will submit piece of code that will be evaluated and interact on the DSL
Let's see how we can handle that

Steps
=====
step 0 here I instantiate groovyShell, my script do a prinltn statement
step 1 let's define move method - to set up the base of our dsl, i'm a fast typer
step 2 define left
step 3 replace shell by ScriptEngineMgr from jsr 223
step 4 replace by engine.eval

Final comments
==============
Easy peasy no far.

29:291
#####################################
#####################################
#                                   #
#         Slide #31 Script          #
#         Base class                #
#                                   #
#####################################
#####################################

Steps
=====
step 0 Lets restart from a previous step, I want ot m
step 1 define base class 2
step 2 highlight move method
step 3 remove move definition in script
step 4 introduce compilerConfiguration:
       - I create compile conf,
       - set the baseclass
step 5 inject it in groovy shell

Final comments
==============
not very complicated
but already our script looks much cleaner
we already have a sense of fluency
Lets carry on with binding

#####################################
#####################################
#                                   #
#         Slide #33 Binding         #
#                                   #
#####################################
#####################################

Steps
=====
step 0 in order to define compiler configuration i had
       - to instantiate an empty binding
       - lets add move right
step 1 introduce right in binding
step 2 ad move right command

Final comments
==============
Different way of achieveing the same result either by
- for left: we define a property of a script base class
- for right it's a binding. a map of variable

#####################################
#####################################
#                                   #
#         Slide #38 Turtle          #
#                                   #
#####################################
#####################################

Purpose
=======
Now we are going to create a more elaborate move mechanism

Steps
=====
step 0 back to your Groovy script
step 1 Firts lets inroduce a Position.
       - x/y
       - define for ex left/right
step 2 add Direction enums
step 3 add turtle class
       - with current position
       - and a move method that will change the current position
       - for now we just print x/y
step 4 new Turtle()
step 5 highlight compilerconf + binding
step 6 I wan to change my binding to inject
       - direction: left, right
       - move is an alias, a pointer to a turtle's move method
step 7 highlight
step 8 remove GameScript base class, here I use binding only

Final comments
==============
Here we are with our a turtle that can move.
//decouple??
What about in Scala?

#####################################
#####################################
#                                   #
#         Slide #44 JSon            #
#                                   #
#####################################
#####################################

Purpose
=======
Instead of printing the moves, now lets generate JSon structure of the moves that will be consumed and displayed on UI Side
As Pascal explained in our json, we want to have a list of steps to describe all my turtle moves

Steps
=====
step 1 def step = [] to use steps instead println
step 2 steps.add(start) to store initial position steps after move
step 3 highlight
step 4 steps.add(newPosition) to store position after move
step 5 add json builder
step 6 highlight: going back to our dsl
step 7 mix plain groovy + DSL 4.times {move left} to have a nice upstairs effect

Final comments
==============
We made good progress. We start to see our turtle moving Cool

#####################################
#####################################
#                                   #
#    Slide #50 Command chaining     #
#                                   #
#####################################
#####################################

Purpose
=======
Now we are going to enrich the DSL with command chaining
we want to express we can move more than on step at a time
like move left by 2

Steps
=====
step 1: highlight dsl syntax
step 2: move left by 2
step 3: add by method
step 4: highlight steps.add from turtle move
step 5: remove steps.add from turtle move
step 6: add steps.add to turtle by
step 7: change new Position to add direction

Final comments
==============

#####################################
#####################################
#                                   #
#          Slide #53 odd chaining   #
#                                   #
#####################################
#####################################

Purpose
=======


Steps
=====
step 1: highlight dsl syntax
step 2: move left by 2 steps
step 3: highlight by method
step 4: change by to return map with silent word: steps/step

Final comments
==============

#####################################
#####################################
#                                   #
#          Slide #61 kiss           #
#                                   #
#####################################
#####################################

Purpose
=======


Steps
=====
step 1 add kiss() to dsl
step 2 define kiss
step 3 highlight binding
step 4 add kiss to binding
step 5 replace kiss() by kiss
step 6 comment binding
step 7 define property missing: I treat kiss as porperty and then do a method call
step 8 add baseclass into compiler configuration

Final comments
==============

#####################################
#####################################
#                                   #
#       Slide #68 Category          #
#                                   #
#####################################
#####################################

Purpose
=======
We just want to add dynamicall some method to integer

Steps
=====
step1: highlight dsl
step2: move left by 2.steps
step3: add class StepCategory
step4: highlight shell.eval
step5: modify shell.eval with use()
step6: highlight class StepCategory
step7: replace with @Category annotation

Final comments
==============
we've seen how to dynamically enhance integer we can also do it statically with extension introduce in Groovy 2
we'll see later how to type check our DSL and how to use extension

#####################################
#####################################
#                                   #
#         Slide #74 TypeCheck       #
#                                   #
#####################################
#####################################

Purpose
=======

Steps
=====
step 1: highlight compiler
step 2: add typechecked ext

#Final comments:

#####################################
#####################################
#                                   #
#       Slide #81 System.exit       #
#                                   #
#####################################
#####################################

Purpose
=======
snikey hacker

Steps
=====
step 1: highlight dsl
step 2: add system.exit
step 3: add SecureASTCustomizer

Final comments
==============

#####################################
#####################################
#                                   #
#        Slide #86 while(true)      #
#                                   #
#####################################
#####################################

Purpose
=======

Steps
=====
step1: highlight dsl
step2: modify dsl with infinite loop
step3: highlight ASTTransformationCustomizer
step4: add TimeInterrupt

Final comments
==============

#####################################
#####################################
#                                   #
#         Slide #94 AST transform   #
#                                   #
#####################################
#####################################

Purpose
=======
Intercepting the application behavior can be done without compiler plugins
with traits. Here we just intercept move calls and add a counter that raises
an exception after 3 moves.

Steps
=====

Final comments
==============


#####################################
#####################################
#                                   #
#         Slide #98 CPS Style       #
#                                   #
#####################################
#####################################

Purpose
=======
Instead of suspending Threads, we could play with continuations in order to create potentially complex flows, suspending execution
when a question needs to be asked to other participants and rebranching in the flow when the answer arrives.

Steps
=====
#0: Here is how an Ask class could look like
    The start takes a DSL and encloses it in a reset section. This is the continuation delimitation.
    Then if a ask occurs in the DSL, the questin is printed, and the execution is suspended. In fact to be able to rebranch, 
    we store the continuation as an instance variable.
    When the answer arrives, we call cont and the process flow goes on.
#1: And here how we could use it. This is more fun in interactive mode as we might see it in the game

#Final comments:
CPS is a very interesting and powerful way to control execution flow. It is definitely hard to grasp and 
read. Anyway I thought it was an interesting idea to play with it in that kind of context.

==========================================================
==========================================================
==========================================================
==========================================================

Template
#####################################
#####################################
#                                   #
#         Slide #xx xxxxxx          #
#                                   #
#####################################
#####################################

Purpose
=======
--

Steps
=====
#0:
#1:
#2:
#3:
#4:
#5:
#6:
#7:
#8:

#Final comments:
