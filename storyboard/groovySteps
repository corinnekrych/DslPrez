#####################################
#####################################
#                                   #
#         Slide #24 Script          #
#                                   #
#####################################
#####################################

A few words on the format of our tutorial
Grails app, controller on server to evaluate Groovy and Scala Script
Client side we use code mirror to show you step by step how to achieve

Purpose
=======
Lets see how we can embed and evaluate Groovy script.

Users will submit piece of code that will be evaluated and interact on the DSL
Let's see how we can handle that

Steps
=====
step 0 here I instantiate groovyShell, my script do a prinltn statement
step 1 let's define move method - to set up the base of our dsl, i'm a fast typer
step 2 define left
step 3 replace shell by ScriptEngineMgr from jsr 223
step 4 replace by engine.eval

Final comments
==============
Easy peasy no far.

#####################################
#####################################
#                                   #
#         Slide #31 Script          #
#         Base class                #
#                                   #
#####################################
#####################################

Steps
=====
step 0 Lets restart from a previous step, I want ot m
step 1 define base class 2
step 2 highlight move method
step 3 remove move definition in script
step 4 introduce compilerConfiguration:
       - I create compile conf,
       - set the baseclass
step 5 inject it in groovy shell

Final comments
==============
not very complicated
but already our script looks much cleaner
we already have a sense of fluency
Lets carry on with binding

#####################################
#####################################
#                                   #
#         Slide #33 Binding         #
#                                   #
#####################################
#####################################

Steps
=====
step 0 in order to define compiler configuration i had
       - to instantiate an empty binding
       - lets add move right
step 1 introduce right in binding
step 2 ad move right command

Final comments
==============
Different way of achieveing the same result either by
- for left: we define a property of a script base class
- for right it's a binding. a map of variable

#####################################
#####################################
#                                   #
#         Slide #38 Turtle          #
#                                   #
#####################################
#####################################

Purpose
=======
Now we are going to create a more elaborate move mechanism

Steps
=====
step 0 back to your Groovy script
step 1 Firts lets inroduce a Position.
       - x/y
       - define for ex left/right
step 2 add Direction enums
step 3 add turtle class
       - with current position
       - and a move method that will change the current position
       - for now we just print x/y
step 4 new Turtle()
step 5 highlight compilerconf + binding
step 6 I wan to change my binding to inject
       - direction: left, right
       - move is an alias, a pointer to a turtle's move method
step 7 highlight
step 8 remove GameScript base class, here I use binding only

Final comments
==============
Here we are with our a turtle that can move.
//decouple??
What about in Scala?

#####################################
#####################################
#                                   #
#         Slide #44 JSon            #
#                                   #
#####################################
#####################################

Purpose
=======
Instead of printing the moves, now lets generate JSon structure of the moves that will be consumed and displayed on UI Side
As Pascal explained in our json, we want to have a list of steps to describe all my turtle moves

Steps
=====
step 1 def step = [] to use steps instead println
step 2 steps.add(start) to store initial position steps after move
step 3 highlight
step 4 steps.add(newPosition) to store position after move
step 5 add json builder
step 6 highlight: going back to our dsl
step 7 mix plain groovy + DSL 4.times {move left} to have a nice upstairs effect

Final comments
==============
We made good progress. We start to see our turtle moving Cool

#####################################
#####################################
#                                   #
#    Slide #55 Command chaining     #
#                                   #
#####################################
#####################################

Purpose
=======
Now we are going to enrich the DSL with command chaining like I move by ...

Steps
=====
#0: Ok here is our code
#1: and here is what I would like to have
#2: I want to create an Option to retain the direction. Basically a by can occur only after a move so I will retain the direction
    with the move and reuse it in the by.
#3: move will retain the current Direction
#4: then the by move by 1 step less in the retained direction. At the end, we unset the option so that a by called without a move is
    simply pointless
#5: Now we would like to have some readability by adding steps) at the end of the move command. But be careful with the 0 arity of 
    steps methods we want to define - space of ;
#6: And we just define step and steps that do simply nothing

#Final comments:

#####################################
#####################################
#                                   #
#          Slide #62 Kiss           #
#                                   #
#####################################
#####################################

Purpose
=======
Lets implement a kiss method. By default as we saw Scala supports 0 arity for postfix methods but only on instances 
I kiss will work, kiss either can work but needs to be defined in the REPL. lets have a look.

Steps
=====
#0: Once again the reference code
#1: Lets create a kiss method with 0 parameter
#2: and lets call it - we dont need parenthesis
#3: So lets change method signature  but now I.kiss() would fail whenever we need it
#4: Now if we want to bind kiss as a method inside the DSL, we face the fact that we define a 0 arity function 
    and need to call it with parameters
#5: If we want to get rid of parenthesis the following trick can work by doing an eval before running the script. Locally
    doing I.kiss instead of I.kiss _ does the trick.

#Final comments:

#####################################
#####################################
#                                   #
#       Slide #67 implicits         #
#                                   #
#####################################
#####################################

Purpose
=======
We just want to take advantage of implicit conversions to enrich (by keeping typesafety) objects behavior

Steps
=====
#0: Once again lets take previous code
#1: Here is what we would like to have
#2: We provide an implicit conversion to a class that provides a times method => Run
#3: Now I want also to be able to enrich integer with steps suffix to make it more readable
#4: We create a Step class that has step and steps idempotent methods and an implicit conversion (just to show implicit methods 
    and implicit classes)
#5: We need to fix the by method => Run

#Final comments:
Implicits are very powerful and they are scoped. But be careful with its usage.

#####################################
#####################################
#                                   #
#         Slide #75 Dynamics        #
#                                   #
#####################################
#####################################

Purpose
=======
Scala is naturally TypeChecked. What is interesting is to see Groovy adding TypeChecking and at the opposite Dynamics. In fact 
Scala has structural typing that tends to mimic duck typing of dynamic languages. You just provide an anonymous trait defining the 
methods that the passed object must have. But lets have a quick look at Dynamics.

Steps
=====
#0: Ok here it is how it looks like
#1: property access
#2: property setter
#3: function call
#4: function call with named parameters 

#Final comments:

#####################################
#####################################
#                                   #
#       Slide #80 System.exit       #
#                                   #
#####################################
#####################################

Purpose
=======
A plugin compiler is provided that analyzes AST and stops
if it meets a System.exit call

Steps
=====
#0: Reference code
#1: Now we add a System.exit => Run

#Final comments:
Compiler plugins offer powerful way to alter code structure
but this is definitely not obvious.

#####################################
#####################################
#                                   #
#        Slide #85 while(true)      #
#                                   #
#####################################
#####################################

Purpose
=======
Again lets enhance script security to limi time allowed to a script execution.
Here the code is modified again thanks to a compiler plugin that tracjs the elapsed time since the 
script has started and raises an exception if time is over.

Steps
=====
#0: Reference code
#1: Now we add a while(true) => Run

#Final comments:
Same as previously. Powerful but complex

#####################################
#####################################
#                                   #
#         Slide #89 traits          #
#                                   #
#####################################
#####################################

Purpose
=======
Intercepting the application behavior can be done without compiler plugins
with traits. Here we just intercept move calls and add a counter that raises
an exception after 3 moves.

Steps
=====
#0: Back to our reference code
#1: First lets create a trait with a counter and an override of the move method - an interceptor. In that case a standard class extending
    Turtle would be enough. Advantage of traits compared to class is that we can combine more than one in a kind of multiple inheritance.
    Ideally we would create a Move trait and a LimitedMove extending first trait. By default Turtle would extend Move and we would create
    a mixed in Turtle instance as we will see just now
#2: we add limited actions
#3: Before the true DSL evaluation, I reset the counter
#4: This is how it would look like in the interpreter
#5: If I have too many steps ... It fails => Run

#Final comments:
Traits are very powerful way to mix behavior. I think we can see objects as structure to which we add behavior thanks to traits
Mixin of traits can help composing very various behaviors with a limited number of classes/traits.

#####################################
#####################################
#                                   #
#         Slide #98 CPS Style       #
#                                   #
#####################################
#####################################

Purpose
=======
Instead of suspending Threads, we could play with continuations in order to create potentially complex flows, suspending execution
when a question needs to be asked to other participants and rebranching in the flow when the answer arrives.

Steps
=====
#0: Here is how an Ask class could look like
    The start takes a DSL and encloses it in a reset section. This is the continuation delimitation.
    Then if a ask occurs in the DSL, the questin is printed, and the execution is suspended. In fact to be able to rebranch, 
    we store the continuation as an instance variable.
    When the answer arrives, we call cont and the process flow goes on.
#1: And here how we could use it. This is more fun in interactive mode as we might see it in the game

#Final comments:
CPS is a very interesting and powerful way to control execution flow. It is definitely hard to grasp and 
read. Anyway I thought it was an interesting idea to play with it in that kind of context.

==========================================================
==========================================================
==========================================================
==========================================================

Template
#####################################
#####################################
#                                   #
#         Slide #xx xxxxxx          #
#                                   #
#####################################
#####################################

Purpose
=======
--

Steps
=====
#0:
#1:
#2:
#3:
#4:
#5:
#6:
#7:
#8:

#Final comments:
