#####################################
#####################################
#                                   #
#         Slide #24 Script          #
#                                   #
#####################################
#####################################

A few words on the format of our tutorial
Grails app, controller on server to evaluate Groovy and Scala Script
Client side we use code mirror to show you step by step how to achieve
Be carefull using 1..2 key but othe than that you can enter you own code and test it

Purpose
=======
Lets see how we can embed and evaluate Groovy script.

Users will submit piece of code that will be evaluated and interact on the DSL
Let's see how we can handle that

Steps
=====
step 0 here I instantiate groovyShell, my script do a prinltn statement
       I can change the text and just run the script
step 1 let's define move method - to set up the base of our dsl, i'm a fast typer
step 2 define left to not have the quote surrounding it
step 3 replace shell by ScriptEngineMgr from jsr 223
       Remember Pascal talking bout jsr223 javax.script package
step 4 replace by engine.eval
       and evaluate get replaced by eavl, very similar concept
Final comments
==============
Easy peasy no far.

29:291
#####################################
#####################################
#                                   #
#         Slide #31 Script          #
#         Base class                #
#                                   #
#####################################
#####################################

Steps
=====
step 0 Lets restart from a previous step, I want ot m
step 1 define base class 2
step 2 highlight move method
step 3 remove move definition in script
step 4 introduce compilerConfiguration:
       - I create compile conf,
       - set the baseclass
step 5 inject it in groovy shell

Final comments
==============
not very complicated
but already our script looks much cleaner
we already have a sense of fluency
Lets carry on with binding

#####################################
#####################################
#                                   #
#         Slide #33 Binding         #
#                                   #
#####################################
#####################################

Steps
=====
step 0 We saw how to use BaseClass, another way of doing it is to go through binding
       Let's see how binding work with a very simple ex
       Lets add move right
step 1 introduce right in binding
       Remember in order to define compiler configuration we had
       - to instantiate an empty binding
step 2 add move right command
       right is just available

Final comments
==============
Different way of achieving the same result either by
- for left: we define a property of a script base class
- for right it's a binding. a map of variable. we will see later we could also put int the binding a
Groovy object, a method

#####################################
#####################################
#                                   #
#         Slide #38 Turtle          #
#                                   #
#####################################
#####################################

Purpose
=======
As Pascal said it's better to deciple your semantic from your syntax.
What is our semantic model here ? we need a turtle that move on different position

Steps
=====
step 0 back to your Groovy script
step 1 Firts lets inroduce a Position.
       - x/y
       - define for ex left/right
step 2 add Direction enums
step 3 add turtle class
       - with current position
       - and a move method that will change the current position
       - for now we just print x/y
step 4 new Turtle()
step 5 highlight compilerconf + binding
step 6 I wan to change my binding to inject
       - direction: left, right
       - move is an alias, a pointer to a turtle's move method
step 7 highlight
step 8 remove GameScript base class, here I use binding only

Final comments
==============
Here we are with our a turtle that can move.
What about in Scala?

#####################################
#####################################
#                                   #
#         Slide #44 JSon            #
#                                   #
#####################################
#####################################

Purpose
=======
Instead of printing the moves, now lets generate JSon structure of the moves that will be
consumed and displayed on UI Side.
As Pascal explained in our json, we want to have a list of steps to describe all my turtle moves

Steps
=====
step 1 def step = [] to use steps instead println
       let's use an array to store all the steps done by F
step 2 steps.add(start) to store initial position steps after move
step 3 highlight
step 4 steps.add(newPosition) to store position after move
step 5 add json builder
       in this ex very easy builder because we just provide an array of step
       notice the use of JsonBuilder a markup builder
       we'll see later on how to build such a builder in just a few lines
step 6 highlight: going back to our dsl
step 7 mix plain groovy + DSL 4.times {move left} to have a nice upstairs effect

Final comments
==============
We made good progress. We start to see our turtle moving. Isn't it Cool Pascal. show us the turtle goove in Scala :)

#####################################
#####################################
#                                   #
#    Slide #50 Command chaining     #
#                                   #
#####################################
#####################################

Purpose
=======
Now we are going to enrich the DSL with command chaining
we want to express we can move more than on step at a time
like move left by 2

Steps
=====
step 1: highlight dsl syntax
step 2: move left by 2
step 3: add by method
step 4: highlight steps.add from turtle move
step 5: remove steps.add from turtle move
step 6: add steps.add to turtle by
step 7: change new Position to add direction

Final comments
==============
cool we're seen how to chain methods call with its argument, how would you do it with odd numbers

#####################################
#####################################
#                                   #
#          Slide #53 odd chaining   #
#                                   #
#####################################
#####################################

Purpose
=======
Several options:
->use categories->se in moredetails later
->named parameters, you can't skip the comma
->using map return

Steps
=====
step 1: highlight dsl syntax : we want totranform that
step 2: into that: move left by 2 steps
step 3: highlight by method : the by method instead of returning a Turtle will return a Map
step 4: change by to return map with silent word: steps/step

Final comments
==============

#####################################
#####################################
#                                   #
#          Slide #61 kiss           #
#                                   #
#####################################
#####################################

Purpose
=======


Steps
=====
step 1 add kiss() to dsl : first lets add kiss call in our DSL with parenthasis syntax
step 2 define kiss
step 3 highlight binding
step 4 add kiss to binding : we add a binding => that should work
step 5 BUT that's not what we want replace kiss() by kiss
step 6 comment binding
step 7 define property missing: I treat kiss as porperty and then do a method call
step 8 add baseclass into compiler configuration

Final comments
==============

#####################################
#####################################
#                                   #
#       Slide #68 Category          #
#                                   #
#####################################
#####################################

Purpose
=======
We just want to add dynamically some method to integer

Steps
=====
step1: highlight dsl : we want to change from
step2: move left by 2.steps  : to 2.steps, 2 is int and doesn't have steps attributes
step3: add class StepCategory : the static method have one argumetns which an internal arg to speciafy which
       class we want to extend
       we add step method and we don't do much, like silent word
step4: highlight shell.eval
step5: modify shell.eval with use() : to scope where the category apply you have to surround it with use (StepCategory)
       we do it jsut before eval not inside the script to keep lean
step6: highlight class StepCategory  : another way to do it with annotation
step7: replace with @Category annotation

Final comments
==============
we've seen how to dynamically enhance integer we can also do it statically with extension introduce in Groovy 2
we'll see later how to type check our DSL and how to use extension

#####################################
#####################################
#                                   #
#         Slide #74 TypeCheck       #
#                                   #
#####################################
#####################################

Purpose
=======

Steps
=====
step 1: highlight compiler
step 2: add typechecked ext

#Final comments:
You've got this erro rmessage it's possible to customize the error with whatever you want
but where is the TurtleExtension defined.

it's there:
- to TC your DSL you can use the Typechecking DSL.
Told you it's easy to build DSL
- this DSL allow you to hook into the compilation process
- several predefined hook method you can use here: unresolvedVariable and methodNotFound
In a TC ext you can access AST tree to query etc... Do not modify AST
- it's a groovy file that should be present in the cp, more used as a resource


#####################################
#####################################
#                                   #
#       Slide #81 System.exit       #
#                                   #
#####################################
#####################################

Purpose
=======
snikey hacker

Steps
=====
step 1: highlight dsl
step 2: add system.exit
step 3: add SecureASTCustomizer

Final comments
==============

#####################################
#####################################
#                                   #
#        Slide #86 while(true)      #
#                                   #
#####################################
#####################################

Purpose
=======

Steps
=====
step1: highlight dsl
step2: modify dsl with infinite loop
step3: highlight ASTTransformationCustomizer
step4: add TimeInterrupt : for 5 sec ... and now we have to count

Final comments
==============
Very easy with predenined ASTtransformation customizers
you just use them

#####################################
#####################################
#                                   #
#         Slide #95 AST transform   #
#                                   #
#####################################
#####################################

Purpose
=======
We saw how to use predefines AST transform customizer
How would you feel about writing your own?
it's not that difficult.

Steps
=====
step1: add your class extending CompilationCustomizer
step2: add it to compilerconfig
step3: add some body contnet inside overriden call method
       get the AST
       find thw run method of my script
       collect all block statement inside the run mrthod
step4: add visit call
       I want to visit all those block st to count the usage of move
step5: Add MathodCallVisitor
       we need to write our custom visitor and overload  visitMthodCallExpression
step6: Add body to visitMethodCallExpr

Final comments
==============
Here I show you how to count I don't really move nodes and block sturture, but you can
With Great power came great responsabilities
Don't over abuse transformation

#####################################
#####################################
#                                   #
#         Slide #99 Ask             #
#                                   #
#####################################
#####################################

Purpose
=======


Steps
=====
step1: insert DSL ask
step2: add ask method  : here we have a very compact chaining
       ask is a method returninf amap
       whose assign key is a closure
       take on silent owrd paramter
       and which return a map
       using withDefault, we can synamically add content to the map
step3: add propertyMissingMethod for the silent word 'to'
step4: add display map method
step5: add display map in DSL

Final comments
==============

==========================================================
==========================================================
==========================================================
==========================================================

Template
#####################################
#####################################
#                                   #
#         Slide #xx xxxxxx          #
#                                   #
#####################################
#####################################

Purpose
=======
--

Steps
=====
#0:
#1:
#2:
#3:
#4:
#5:
#6:
#7:
#8:

#Final comments:
